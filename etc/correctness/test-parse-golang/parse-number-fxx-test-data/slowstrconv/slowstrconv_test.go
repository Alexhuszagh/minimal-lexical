// Copyright 2020 The ParseNumberFxxTestData Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package slowstrconv

import (
	"math"
	"strconv"
	"testing"
)

func TestParseFloatFromBytes(tt *testing.T) {
	testCases := []string{
		// Strings from github.com/golang/go and its src/strconv/atof_test.go
		"1",
		"+1",
		"1e23",
		"1E23",
		"100000000000000000000000",
		"1e-100",
		"123456700",
		"99999999999999974834176",
		"100000000000000000000001",
		"100000000000000008388608",
		"100000000000000016777215",
		"100000000000000016777216",
		"-1",
		"-0.1",
		"-0",
		"1e-20",
		"625e-3",
		"0",
		"0e0",
		"-0e0",
		"+0e0",
		"0e-0",
		"-0e-0",
		"+0e-0",
		"0e+0",
		"-0e+0",
		"+0e+0",
		"0e+01234567890123456789",
		"0.00e-01234567890123456789",
		"-0e+01234567890123456789",
		"-0.00e-01234567890123456789",
		"0e291",
		"0e292",
		"0e347",
		"0e348",
		"-0e291",
		"-0e292",
		"-0e347",
		"-0e348",
		"1.7976931348623157e308",
		"-1.7976931348623157e308",
		"1.7976931348623159e308",
		"-1.7976931348623159e308",
		"1.7976931348623158e308",
		"-1.7976931348623158e308",
		"1.797693134862315808e308",
		"-1.797693134862315808e308",
		"1e308",
		"2e308",
		"1e309",
		"1e310",
		"-1e310",
		"1e400",
		"-1e400",
		"1e400000",
		"-1e400000",
		"1e-305",
		"1e-306",
		"1e-307",
		"1e-308",
		"1e-309",
		"1e-310",
		"1e-322",
		"5e-324",
		"4e-324",
		"3e-324",
		"2e-324",
		"1e-350",
		"1e-400000",
		"1e-4294967296",
		"1e+4294967296",
		"1e-18446744073709551616",
		"1e+18446744073709551616",
		"2.2250738585072012e-308",
		"2.2250738585072011e-308",
		"4.630813248087435e+307",
		"22.222222222222222",
		"1.00000000000000011102230246251565404236316680908203125",
		"1.00000000000000011102230246251565404236316680908203124",
		"1.00000000000000011102230246251565404236316680908203126",
		"1.00000000000000033306690738754696212708950042724609375",
		"1.000000059604644775390625",
		"1.000000059604644775390624",
		"1.000000059604644775390626",
		"1.000000059604644775390625",
		"340282346638528859811704183484516925440",
		"-340282346638528859811704183484516925440",
		"-340282346638528859811704183484516925440",
		"3.4028236e38",
		"-3.4028236e38",
		"3.402823567e38",
		"-3.402823567e38",
		"3.4028235678e38",
		"-3.4028235678e38",
		"1e-38",
		"1e-39",
		"1e-40",
		"1e-41",
		"1e-42",
		"1e-43",
		"1e-44",
		"6e-45",
		"5e-45",
		"1e-45",
		"2e-45",
		"3e-45",
		"4951760157141521099596496896",

		// Strings from github.com/google/wuffs and its test/c/std/json.c
		"+0.0",
		"0",
		"0e0",
		"0e99",
		"1e-332",
		"4.9406564584124654e-324",
		"9.8813129168249309e-324",
		"1.4821969375237396e-323",
		"1e-308",
		"2.2250738585072009E-308",
		"2.2250738585072014E-308",
		"1e-307",
		"1.234e-45",
		"0.0000000000000000000000000000000000000000000012345678900000",
		"5.9604644775390625e-8",
		"0.01171875",
		".25",
		"0.2999999999999999888977697537484345957636833190917968750000",
		"0.3",
		"0.30000000000000004",
		"0.3000000000000000444089209850062616169452667236328125000000",
		"0.333333333333333333333333333333",
		"0.99999999999999988898",
		"0.999999999999999999999999999999",
		"1",
		"1.0000000000000002",
		"1.0000000000000004",
		"1.25",
		"+1.5",
		"3",
		"3.14159",
		"3.14159265358979",
		"3.141592653589793",
		"3.141592653589793238462643383279",
		"3.1415926535897932384626433832795028841971693993751",
		"3.5",
		"5",
		"22",
		"+22.",
		"23",
		"2.4E+00000000001",
		"2.4E001",
		"2.4E1",
		"24",
		"24000000000000.00000e-12",
		"123456.789012",
		"2.16656806400000023841857910156251e9",
		"1e10",
		"4503599627370496",
		"4503599627370496.5",
		"4503599627370497",
		"4503599627370497.5",
		"4503599627370498",
		"9007199254740990",
		"9.007199254740991e+15",
		"9007199254740992",
		"9007199254740993",
		"9007199254740994",
		"9007199254740995",
		"9007199254740996",
		"9007199254740996",
		"7.2057594037927933e+16",
		"9999999999999999999",
		"18459999196907202592",
		"1e20",
		"1e+23",
		"1e23",
		"1e30",
		"+1E+100",
		"+1E+100",
		"1e+288",
		"1e+289",
		"1e+290",
		"9999999999999999999e+288",
		"9999999999999999999e+289",
		"1.7976931348623157e308",
		"1.8e308",
		"1e+316",
		"10000000000000000000000000000000000000000000e+308",
		"1e999",
		"9999999999999999999e+290",
		"-0.000e0",
		"-3",
		"-2e308",
	}

	// Check that ParseFloatFromBytes is consistent with strconv.ParseFloat for
	// both float32 and float64. strconv.ParseFloat does not speak float16.
	for _, tc := range testCases {
		got, err := ParseFloatFromBytes([]byte(tc))
		if err != nil {
			tt.Fatalf("tc=%q: %v", tc, err)
		}

		f32Bits, err := strconv.ParseFloat(tc, 32)
		if isFatal(err) {
			tt.Fatalf("tc=%q: %v", tc, err)
		}
		wantF32 := math.Float32bits(float32(f32Bits))
		if got.F32 != wantF32 {
			tt.Fatalf("tc=%q: F32: got 0x%08X, want 0x%08X", tc, got.F32, wantF32)
		}

		f64Bits, err := strconv.ParseFloat(tc, 64)
		if isFatal(err) {
			tt.Fatalf("tc=%q: %v", tc, err)
		}
		wantF64 := math.Float64bits(float64(f64Bits))
		if got.F64 != wantF64 {
			tt.Fatalf("tc=%q: F64: got 0x%08X, want 0x%08X", tc, got.F64, wantF64)
		}
	}
}

func isFatal(err error) bool {
	if err == nil {
		return false
	}
	// strconv.ParseFloat returns (infinity, NumError{etc, ErrRange}) when
	// parsing something too large to otherwise represent.
	e, ok := err.(*strconv.NumError)
	return !ok || (e.Err != strconv.ErrRange)
}

func TestParseOneThird(tt *testing.T) {
	got, err := ParseFloatFromBytes([]byte(
		"0.3333333333333333333333333333333333333333333333333333333333333333"))
	if err != nil {
		tt.Fatalf("%v", err)
	}

	want := ParseFloatResult{
		F16: 0x3555,
		F32: 0x3EAA_AAAB,
		F64: 0x3FD5_5555_5555_5555,
	}

	if got != want {
		tt.Fatalf("\ngot  %X\nwant %X", got, want)
	}
}
